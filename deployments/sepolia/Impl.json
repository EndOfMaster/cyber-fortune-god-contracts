{
  "address": "0x0298A1Fc7aFaB1FC01b26Fe8B4cd3257A9D27ad2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "OfferingIncense",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdateSupplyByDay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "firstMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_variationFactor",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "meritCoin",
      "outputs": [
        {
          "internalType": "contract MeritCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "offeringIncense",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thirdMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "updateSupplyByDay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMintNumByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "variationFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaa87a52a4617ec76c40d22e268dc2353aa3bbf60997901490b88a952c1857991",
  "receipt": {
    "to": null,
    "from": "0x37D2AC60E6fB6B0c54969f75D10245Bff815bce3",
    "contractAddress": "0x0298A1Fc7aFaB1FC01b26Fe8B4cd3257A9D27ad2",
    "transactionIndex": 84,
    "gasUsed": "1743343",
    "logsBloom": "0x
    "blockHash": "0x8fc0c804fea092e4155c1d169146cc6bc4487c68812d38aedef77d6cf4eccc71",
    "transactionHash": "0xaa87a52a4617ec76c40d22e268dc2353aa3bbf60997901490b88a952c1857991",
    "logs": [],
    "blockNumber": 6099588,
    "cumulativeGasUsed": "10701707",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c55ce98de960b1a70b4cddfe1da6ea24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"OfferingIncense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplyByDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"firstMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variationFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meritCoin\",\"outputs\":[{\"internalType\":\"contract MeritCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"offeringIncense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateSupplyByDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMintNumByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyberFortuneGod.sol\":\"CyberFortuneGod\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CyberFortuneGod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./MeritCoin.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract CyberFortuneGod is OwnableUpgradeable {\\n    uint256 public constant totalSupplyByDay = 888;\\n    uint256 public constant firstMintByDay = 88;\\n    uint256 public constant secondMintByDay = 66;\\n    uint256 public constant thirdMintByDay = 36;\\n    uint256 public constant mintPrice = 1e15;\\n\\n    uint256 public startTime;\\n    uint256 public variationFactor;\\n\\n    uint256 public remainingSupply;\\n    uint256 public lastDecrement;\\n\\n    MeritCoin public meritCoin;\\n\\n    //Record the number of mint successes every day since the start\\n    //days => mint times\\n    mapping(uint256 => uint256) public mintNum;\\n\\n    //Record whether the distribution volume is updated on that day\\n    mapping(uint256 => bool) public updateSupplyByDay;\\n\\n    mapping(uint256 => mapping(address => uint256)) public userMintNumByDay;\\n\\n    event OfferingIncense(address _sender, uint256 _mintAmount);\\n\\n    event WithdrawETH(address _sender, address _receiver, uint256 _amount);\\n\\n    event UpdateSupplyByDay(address _sender, uint256 _days, uint256 _timestamp);\\n\\n    function initialize(uint256 _startTime, uint256 _variationFactor) public initializer {\\n        __Ownable_init();\\n        startTime = _startTime;\\n        variationFactor = _variationFactor;\\n        remainingSupply = totalSupplyByDay;\\n        meritCoin = new MeritCoin(address(this));\\n\\n        uint256 _decimals = meritCoin.decimals();\\n        meritCoin.mint(msg.sender, 10 ** _decimals * 888888);\\n    }\\n\\n    // ==================== non-view function ====================\\n\\n    //main user function\\n    function offeringIncense(uint256 _nonce) external payable {\\n        require(msg.value >= mintPrice, \\\"CyberFortuneGod: Insufficient incense money\\\");\\n\\n        uint256 _days = getDays();\\n\\n        require(userMintNumByDay[_days][msg.sender] < 3, \\\"CyberFortuneGod: Mint up to three times a day\\\");\\n\\n        //update supply by day\\n        if (!updateSupplyByDay[_days]) {\\n            updateSupplyByDay[_days] = true;\\n            remainingSupply = totalSupplyByDay;\\n\\n            emit UpdateSupplyByDay(msg.sender, _days, block.timestamp);\\n        }\\n\\n        uint256 _returns = getMintAmount(_nonce);\\n        require(_returns > 0, \\\"CyberFortuneGod: The incense money has been distributed out today\\\");\\n\\n        userMintNumByDay[_days][msg.sender] += 1;\\n\\n        uint256 _decimals = meritCoin.decimals();\\n        uint256 _mintAmount = 10 ** _decimals * _returns;\\n        meritCoin.mint(msg.sender, _mintAmount);\\n\\n        emit OfferingIncense(msg.sender, _mintAmount);\\n    }\\n\\n    // ==================== view function ====================\\n\\n    function random(uint256 min, uint256 max, uint256 _nonce) public view returns (uint256) {\\n        require(max > min, \\\"max must be greater than min\\\");\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender, _nonce)));\\n        return (randomHash % (max - min + 1)) + min;\\n    }\\n\\n    function getDays() public view returns (uint256) {\\n        return (block.timestamp - startTime) / (24 * 60 * 60);\\n    }\\n\\n    // ==================== private function ====================\\n\\n    function getMintAmount(uint256 _nonce) private returns (uint256 _returns) {\\n        if (remainingSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _days = getDays();\\n        uint256 _mintNum = mintNum[_days];\\n\\n        if (_mintNum < 3) {\\n            _returns = getTop3Amount(_mintNum);\\n        } else {\\n            uint256 _randomSub = random(0, variationFactor, _nonce);\\n            _returns = _randomSub >= lastDecrement ? lastDecrement : lastDecrement - _randomSub;\\n        }\\n\\n        if (_returns >= remainingSupply) {\\n            _returns = remainingSupply;\\n            remainingSupply = 0;\\n            lastDecrement = 0;\\n            return _returns; // Return 0 if the random decrement is greater than the remaining supply\\n        }\\n\\n        lastDecrement = _returns;\\n        remainingSupply -= _returns;\\n        if (_returns > 0) {\\n            mintNum[_days] = _mintNum + 1;\\n        }\\n    }\\n\\n    function getTop3Amount(uint256 _mintNum) private pure returns (uint256 _returns) {\\n        if (_mintNum == 0) return firstMintByDay;\\n        if (_mintNum == 1) return secondMintByDay;\\n        if (_mintNum == 2) return thirdMintByDay;\\n    }\\n\\n    // ==================== owner function ====================\\n\\n    function withdrawETH(address _to) external onlyOwner {\\n        uint256 _balance = address(this).balance;\\n        payable(_to).transfer(_balance);\\n\\n        emit WithdrawETH(msg.sender, _to, _balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xcba02ee697965d271a124ef31214d35da53c970e3a1183e59791e543e7da4443\",\"license\":\"MIT\"},\"contracts/MeritCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MeritCoin is ERC20 {\\n    address public immutable minter;\\n\\n    constructor(address _minter) ERC20(\\\"MeritCoin\\\", \\\"MC\\\") {\\n        minter = _minter;\\n    }\\n\\n    function mint(address _to, uint256 _amount) external {\\n        require(msg.sender == minter, \\\"MeritCoin: You are not minter\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6c05bca2638a30c97111da120d1286093d4355ab289562703bf814564e0892ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ea5806100206000396000f3fe608060405260043610620001475760003560e01c80638f7a0c4911620000b9578063c9a6bd511162000078578063c9a6bd511462000374578063d00ebaeb146200038b578063da0239a614620003ad578063e4a3011614620003c5578063ed8941be14620003ea578063f2fde38b146200040157600080fd5b80638f7a0c4914620002fe578063a1545ef51462000315578063b3e6d434146200032d578063b76d9db91462000345578063b7dc47af146200035c57600080fd5b8063715018a61162000106578063715018a6146200025d5780637299054c146200027557806378e97925146200029a5780637db7941814620002b25780638da5cb5b14620002ca57600080fd5b8063223d534b1462000154578063619f656514620001985780636324364314620001dd5780636817c76c1462000219578063690d8320146200023657600080fd5b366200014f57005b600080fd5b3480156200016157600080fd5b50620001856200017336600462000eb2565b606a6020526000908152604090205481565b6040519081526020015b60405180910390f35b348015620001a557600080fd5b50620001cc620001b736600462000eb2565b606b6020526000908152604090205460ff1681565b60405190151581526020016200018f565b348015620001ea57600080fd5b5062000185620001fc36600462000ee4565b606c60209081526000928352604080842090915290825290205481565b3480156200022657600080fd5b506200018566038d7ea4c6800081565b3480156200024357600080fd5b506200025b6200025536600462000f13565b62000426565b005b3480156200026a57600080fd5b506200025b620004b7565b3480156200028257600080fd5b50620001856200029436600462000f38565b620004cf565b348015620002a757600080fd5b506200018560655481565b348015620002bf57600080fd5b506200018560685481565b348015620002d757600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016200018f565b3480156200030b57600080fd5b5062000185604281565b3480156200032257600080fd5b5062000185620005bd565b3480156200033a57600080fd5b506200018560665481565b3480156200035257600080fd5b5062000185602481565b3480156200036957600080fd5b506200018561037881565b3480156200038157600080fd5b5062000185605881565b3480156200039857600080fd5b50606954620002e5906001600160a01b031681565b348015620003ba57600080fd5b506200018560675481565b348015620003d257600080fd5b506200025b620003e436600462000f65565b620005e4565b6200025b620003fb36600462000eb2565b62000869565b3480156200040e57600080fd5b506200025b6200042036600462000f13565b62000bda565b6200043062000c59565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801562000469573d6000803e3d6000fd5b50604080513381526001600160a01b03841660208201529081018290527f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060600160405180910390a15050565b620004c162000c59565b620004cd600062000cb5565b565b6000838311620005265760405162461bcd60e51b815260206004820152601c60248201527f6d6178206d7573742062652067726561746572207468616e206d696e0000000060448201526064015b60405180910390fd5b600042443385604051602001620005689493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f1981840301815291905280516020909101209050846200058f818662000f9e565b6200059c90600162000fba565b620005a8908362000fe6565b620005b4919062000fba565b95945050505050565b60006201518060655442620005d3919062000f9e565b620005df919062000ffd565b905090565b600054610100900460ff1615808015620006055750600054600160ff909116105b80620006215750303b15801562000621575060005460ff166001145b620006865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200051d565b6000805460ff191660011790558015620006aa576000805461ff0019166101001790555b620006b462000d07565b606583905560668290556103786067556040513090620006d49062000ea4565b6001600160a01b039091168152602001604051809103906000f08015801562000701573d6000803e3d6000fd5b50606980546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa15801562000760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000786919062001014565b60695460ff9190911691506001600160a01b03166340c10f1933620007ad84600a62001136565b620007bc90620d903862001144565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200080357600080fd5b505af115801562000818573d6000803e3d6000fd5b5050505050801562000864576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b66038d7ea4c68000341015620008d65760405162461bcd60e51b815260206004820152602b60248201527f4379626572466f7274756e65476f643a20496e73756666696369656e7420696e60448201526a63656e7365206d6f6e657960a81b60648201526084016200051d565b6000620008e2620005bd565b6000818152606c60209081526040808320338452909152902054909150600311620009665760405162461bcd60e51b815260206004820152602d60248201527f4379626572466f7274756e65476f643a204d696e7420757020746f207468726560448201526c652074696d657320612064617960981b60648201526084016200051d565b6000818152606b602052604090205460ff16620009de576000818152606b6020908152604091829020805460ff191660011790556103786067558151338152908101839052428183015290517fbea77d7032571316759bda46ee1544473a0b842e1ad3b20aec6c09b5c588b889916060908290030190a15b6000620009eb8362000d3b565b90506000811162000a6f5760405162461bcd60e51b815260206004820152604160248201527f4379626572466f7274756e65476f643a2054686520696e63656e7365206d6f6e60448201527f657920686173206265656e206469737472696275746564206f757420746f64616064820152607960f81b608482015260a4016200051d565b6000828152606c60209081526040808320338452909152812080546001929062000a9b90849062000fba565b90915550506069546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000aeb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b11919062001014565b60ff16905060008262000b2683600a62001136565b62000b32919062001144565b6069546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505060408051338152602081018590527f9dff41da70aedfc40cf8d5e57e66ae3053b5477933045f08db4b19e24918bec9935001905060405180910390a15050505050565b62000be462000c59565b6001600160a01b03811662000c4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200051d565b62000c568162000cb5565b50565b6033546001600160a01b03163314620004cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200051d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000d315760405162461bcd60e51b81526004016200051d906200115e565b620004cd62000e35565b600060675460000362000d5057506000919050565b600062000d5c620005bd565b6000818152606a6020526040902054909150600381101562000d8b5762000d838162000e6a565b925062000dc8565b600062000d9d600060665487620004cf565b905060685481101562000dc0578060685462000dba919062000f9e565b62000dc4565b6068545b9350505b606754831062000dea5750506067805460009182905560689190915592915050565b82606881905550826067600082825462000e05919062000f9e565b9091555050821562000e2e5762000e1e81600162000fba565b6000838152606a60205260409020555b5050919050565b600054610100900460ff1662000e5f5760405162461bcd60e51b81526004016200051d906200115e565b620004cd3362000cb5565b60008160000362000e7d57506058919050565b8160010362000e8e57506042919050565b8160020362000e9f57506024919050565b919050565b610cc680620011aa83390190565b60006020828403121562000ec557600080fd5b5035919050565b80356001600160a01b038116811462000e9f57600080fd5b6000806040838503121562000ef857600080fd5b8235915062000f0a6020840162000ecc565b90509250929050565b60006020828403121562000f2657600080fd5b62000f318262000ecc565b9392505050565b60008060006060848603121562000f4e57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121562000f7957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000fb45762000fb462000f88565b92915050565b8082018082111562000fb45762000fb462000f88565b634e487b7160e01b600052601260045260246000fd5b60008262000ff85762000ff862000fd0565b500690565b6000826200100f576200100f62000fd0565b500490565b6000602082840312156200102757600080fd5b815160ff8116811462000f3157600080fd5b600181815b808511156200107a5781600019048211156200105e576200105e62000f88565b808516156200106c57918102915b93841c93908002906200103e565b509250929050565b600082620010935750600162000fb4565b81620010a25750600062000fb4565b8160018114620010bb5760028114620010c657620010e6565b600191505062000fb4565b60ff841115620010da57620010da62000f88565b50506001821b62000fb4565b5060208310610133831016604e8410600b84101617156200110b575081810a62000fb4565b62001117838362001039565b80600019048211156200112e576200112e62000f88565b029392505050565b600062000f31838362001082565b808202811582820484141762000fb45762000fb462000f88565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe60a06040523480156200001157600080fd5b5060405162000cc638038062000cc68339810160408190526200003491620000a6565b6040518060400160405280600981526020016826b2b934ba21b7b4b760b91b815250604051806040016040528060028152602001614d4360f01b81525081600390816200008291906200017d565b5060046200009182826200017d565b5050506001600160a01b031660805262000249565b600060208284031215620000b957600080fd5b81516001600160a01b0381168114620000d157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010357607f821691505b6020821081036200012457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017857600081815260208120601f850160051c81016020861015620001535750805b601f850160051c820191505b8181101562000174578281556001016200015f565b5050505b505050565b81516001600160401b03811115620001995762000199620000d8565b620001b181620001aa8454620000ee565b846200012a565b602080601f831160018114620001e95760008415620001d05750858301515b600019600386901b1c1916600185901b17855562000174565b600085815260208120601f198616915b828110156200021a57888601518255948401946001909101908401620001f9565b5085821015620002395787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610a5b6200026b6000396000818160f701526103170152610a5b6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101d9578063a457c2d7146101e1578063a9059cbb146101f4578063dd62ed3e1461020757600080fd5b8063395093511461018857806340c10f191461019b57806370a08231146101b057600080fd5b806306fdde03146100d457806307546172146100f2578063095ea7b31461013157806318160ddd1461015457806323b872dd14610166578063313ce56714610179575b600080fd5b6100dc61021a565b6040516100e991906108a5565b60405180910390f35b6101197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e9565b61014461013f36600461090f565b6102ac565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610144610174366004610939565b6102c6565b604051601281526020016100e9565b61014461019636600461090f565b6102ea565b6101ae6101a936600461090f565b61030c565b005b6101586101be366004610975565b6001600160a01b031660009081526020819052604090205490565b6100dc610397565b6101446101ef36600461090f565b6103a6565b61014461020236600461090f565b610421565b610158610215366004610997565b61042f565b606060038054610229906109ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610255906109ca565b80156102a25780601f10610277576101008083540402835291602001916102a2565b820191906000526020600020905b81548152906001019060200180831161028557829003601f168201915b5050505050905090565b6000336102ba81858561045a565b60019150505b92915050565b6000336102d485828561057e565b6102df8585856105f8565b506001949350505050565b6000336102ba8185856102fd838361042f565b6103079190610a04565b61045a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103895760405162461bcd60e51b815260206004820152601d60248201527f4d65726974436f696e3a20596f7520617265206e6f74206d696e74657200000060448201526064015b60405180910390fd5b61039382826107c6565b5050565b606060048054610229906109ca565b600033816103b4828661042f565b9050838110156104145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610380565b6102df828686840361045a565b6000336102ba8185856105f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610380565b6001600160a01b03821661051d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610380565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061058a848461042f565b905060001981146105f257818110156105e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610380565b6105f2848484840361045a565b50505050565b6001600160a01b03831661065c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610380565b6001600160a01b0382166106be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610380565b6001600160a01b038316600090815260208190526040902054818110156107365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610380565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061076d908490610a04565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107b991815260200190565b60405180910390a36105f2565b6001600160a01b03821661081c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610380565b806002600082825461082e9190610a04565b90915550506001600160a01b0382166000908152602081905260408120805483929061085b908490610a04565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b818110156108d2578581018301518582016040015282016108b6565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461090a57600080fd5b919050565b6000806040838503121561092257600080fd5b61092b836108f3565b946020939093013593505050565b60008060006060848603121561094e57600080fd5b610957846108f3565b9250610965602085016108f3565b9150604084013590509250925092565b60006020828403121561098757600080fd5b610990826108f3565b9392505050565b600080604083850312156109aa57600080fd5b6109b3836108f3565b91506109c1602084016108f3565b90509250929050565b600181811c908216806109de57607f821691505b6020821081036109fe57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102c057634e487b7160e01b600052601160045260246000fdfea2646970667358221220921514c06960e86d0055124d07f2216430593752dbe984a8bb1dd6d95a7fd32864736f6c63430008140033a264697066735822122027b55404b45e9446a006b48fb9c5b2f5e9233004e34d9f93da6acce8924552d664736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620001475760003560e01c80638f7a0c4911620000b9578063c9a6bd511162000078578063c9a6bd511462000374578063d00ebaeb146200038b578063da0239a614620003ad578063e4a3011614620003c5578063ed8941be14620003ea578063f2fde38b146200040157600080fd5b80638f7a0c4914620002fe578063a1545ef51462000315578063b3e6d434146200032d578063b76d9db91462000345578063b7dc47af146200035c57600080fd5b8063715018a61162000106578063715018a6146200025d5780637299054c146200027557806378e97925146200029a5780637db7941814620002b25780638da5cb5b14620002ca57600080fd5b8063223d534b1462000154578063619f656514620001985780636324364314620001dd5780636817c76c1462000219578063690d8320146200023657600080fd5b366200014f57005b600080fd5b3480156200016157600080fd5b50620001856200017336600462000eb2565b606a6020526000908152604090205481565b6040519081526020015b60405180910390f35b348015620001a557600080fd5b50620001cc620001b736600462000eb2565b606b6020526000908152604090205460ff1681565b60405190151581526020016200018f565b348015620001ea57600080fd5b5062000185620001fc36600462000ee4565b606c60209081526000928352604080842090915290825290205481565b3480156200022657600080fd5b506200018566038d7ea4c6800081565b3480156200024357600080fd5b506200025b6200025536600462000f13565b62000426565b005b3480156200026a57600080fd5b506200025b620004b7565b3480156200028257600080fd5b50620001856200029436600462000f38565b620004cf565b348015620002a757600080fd5b506200018560655481565b348015620002bf57600080fd5b506200018560685481565b348015620002d757600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020016200018f565b3480156200030b57600080fd5b5062000185604281565b3480156200032257600080fd5b5062000185620005bd565b3480156200033a57600080fd5b506200018560665481565b3480156200035257600080fd5b5062000185602481565b3480156200036957600080fd5b506200018561037881565b3480156200038157600080fd5b5062000185605881565b3480156200039857600080fd5b50606954620002e5906001600160a01b031681565b348015620003ba57600080fd5b506200018560675481565b348015620003d257600080fd5b506200025b620003e436600462000f65565b620005e4565b6200025b620003fb36600462000eb2565b62000869565b3480156200040e57600080fd5b506200025b6200042036600462000f13565b62000bda565b6200043062000c59565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801562000469573d6000803e3d6000fd5b50604080513381526001600160a01b03841660208201529081018290527f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060600160405180910390a15050565b620004c162000c59565b620004cd600062000cb5565b565b6000838311620005265760405162461bcd60e51b815260206004820152601c60248201527f6d6178206d7573742062652067726561746572207468616e206d696e0000000060448201526064015b60405180910390fd5b600042443385604051602001620005689493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f1981840301815291905280516020909101209050846200058f818662000f9e565b6200059c90600162000fba565b620005a8908362000fe6565b620005b4919062000fba565b95945050505050565b60006201518060655442620005d3919062000f9e565b620005df919062000ffd565b905090565b600054610100900460ff1615808015620006055750600054600160ff909116105b80620006215750303b15801562000621575060005460ff166001145b620006865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200051d565b6000805460ff191660011790558015620006aa576000805461ff0019166101001790555b620006b462000d07565b606583905560668290556103786067556040513090620006d49062000ea4565b6001600160a01b039091168152602001604051809103906000f08015801562000701573d6000803e3d6000fd5b50606980546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa15801562000760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000786919062001014565b60695460ff9190911691506001600160a01b03166340c10f1933620007ad84600a62001136565b620007bc90620d903862001144565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156200080357600080fd5b505af115801562000818573d6000803e3d6000fd5b5050505050801562000864576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b66038d7ea4c68000341015620008d65760405162461bcd60e51b815260206004820152602b60248201527f4379626572466f7274756e65476f643a20496e73756666696369656e7420696e60448201526a63656e7365206d6f6e657960a81b60648201526084016200051d565b6000620008e2620005bd565b6000818152606c60209081526040808320338452909152902054909150600311620009665760405162461bcd60e51b815260206004820152602d60248201527f4379626572466f7274756e65476f643a204d696e7420757020746f207468726560448201526c652074696d657320612064617960981b60648201526084016200051d565b6000818152606b602052604090205460ff16620009de576000818152606b6020908152604091829020805460ff191660011790556103786067558151338152908101839052428183015290517fbea77d7032571316759bda46ee1544473a0b842e1ad3b20aec6c09b5c588b889916060908290030190a15b6000620009eb8362000d3b565b90506000811162000a6f5760405162461bcd60e51b815260206004820152604160248201527f4379626572466f7274756e65476f643a2054686520696e63656e7365206d6f6e60448201527f657920686173206265656e206469737472696275746564206f757420746f64616064820152607960f81b608482015260a4016200051d565b6000828152606c60209081526040808320338452909152812080546001929062000a9b90849062000fba565b90915550506069546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa15801562000aeb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b11919062001014565b60ff16905060008262000b2683600a62001136565b62000b32919062001144565b6069546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801562000b8057600080fd5b505af115801562000b95573d6000803e3d6000fd5b505060408051338152602081018590527f9dff41da70aedfc40cf8d5e57e66ae3053b5477933045f08db4b19e24918bec9935001905060405180910390a15050505050565b62000be462000c59565b6001600160a01b03811662000c4b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200051d565b62000c568162000cb5565b50565b6033546001600160a01b03163314620004cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200051d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000d315760405162461bcd60e51b81526004016200051d906200115e565b620004cd62000e35565b600060675460000362000d5057506000919050565b600062000d5c620005bd565b6000818152606a6020526040902054909150600381101562000d8b5762000d838162000e6a565b925062000dc8565b600062000d9d600060665487620004cf565b905060685481101562000dc0578060685462000dba919062000f9e565b62000dc4565b6068545b9350505b606754831062000dea5750506067805460009182905560689190915592915050565b82606881905550826067600082825462000e05919062000f9e565b9091555050821562000e2e5762000e1e81600162000fba565b6000838152606a60205260409020555b5050919050565b600054610100900460ff1662000e5f5760405162461bcd60e51b81526004016200051d906200115e565b620004cd3362000cb5565b60008160000362000e7d57506058919050565b8160010362000e8e57506042919050565b8160020362000e9f57506024919050565b919050565b610cc680620011aa83390190565b60006020828403121562000ec557600080fd5b5035919050565b80356001600160a01b038116811462000e9f57600080fd5b6000806040838503121562000ef857600080fd5b8235915062000f0a6020840162000ecc565b90509250929050565b60006020828403121562000f2657600080fd5b62000f318262000ecc565b9392505050565b60008060006060848603121562000f4e57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121562000f7957600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000fb45762000fb462000f88565b92915050565b8082018082111562000fb45762000fb462000f88565b634e487b7160e01b600052601260045260246000fd5b60008262000ff85762000ff862000fd0565b500690565b6000826200100f576200100f62000fd0565b500490565b6000602082840312156200102757600080fd5b815160ff8116811462000f3157600080fd5b600181815b808511156200107a5781600019048211156200105e576200105e62000f88565b808516156200106c57918102915b93841c93908002906200103e565b509250929050565b600082620010935750600162000fb4565b81620010a25750600062000fb4565b8160018114620010bb5760028114620010c657620010e6565b600191505062000fb4565b60ff841115620010da57620010da62000f88565b50506001821b62000fb4565b5060208310610133831016604e8410600b84101617156200110b575081810a62000fb4565b62001117838362001039565b80600019048211156200112e576200112e62000f88565b029392505050565b600062000f31838362001082565b808202811582820484141762000fb45762000fb462000f88565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe60a06040523480156200001157600080fd5b5060405162000cc638038062000cc68339810160408190526200003491620000a6565b6040518060400160405280600981526020016826b2b934ba21b7b4b760b91b815250604051806040016040528060028152602001614d4360f01b81525081600390816200008291906200017d565b5060046200009182826200017d565b5050506001600160a01b031660805262000249565b600060208284031215620000b957600080fd5b81516001600160a01b0381168114620000d157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010357607f821691505b6020821081036200012457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017857600081815260208120601f850160051c81016020861015620001535750805b601f850160051c820191505b8181101562000174578281556001016200015f565b5050505b505050565b81516001600160401b03811115620001995762000199620000d8565b620001b181620001aa8454620000ee565b846200012a565b602080601f831160018114620001e95760008415620001d05750858301515b600019600386901b1c1916600185901b17855562000174565b600085815260208120601f198616915b828110156200021a57888601518255948401946001909101908401620001f9565b5085821015620002395787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610a5b6200026b6000396000818160f701526103170152610a5b6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b41146101d9578063a457c2d7146101e1578063a9059cbb146101f4578063dd62ed3e1461020757600080fd5b8063395093511461018857806340c10f191461019b57806370a08231146101b057600080fd5b806306fdde03146100d457806307546172146100f2578063095ea7b31461013157806318160ddd1461015457806323b872dd14610166578063313ce56714610179575b600080fd5b6100dc61021a565b6040516100e991906108a5565b60405180910390f35b6101197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e9565b61014461013f36600461090f565b6102ac565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610144610174366004610939565b6102c6565b604051601281526020016100e9565b61014461019636600461090f565b6102ea565b6101ae6101a936600461090f565b61030c565b005b6101586101be366004610975565b6001600160a01b031660009081526020819052604090205490565b6100dc610397565b6101446101ef36600461090f565b6103a6565b61014461020236600461090f565b610421565b610158610215366004610997565b61042f565b606060038054610229906109ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610255906109ca565b80156102a25780601f10610277576101008083540402835291602001916102a2565b820191906000526020600020905b81548152906001019060200180831161028557829003601f168201915b5050505050905090565b6000336102ba81858561045a565b60019150505b92915050565b6000336102d485828561057e565b6102df8585856105f8565b506001949350505050565b6000336102ba8185856102fd838361042f565b6103079190610a04565b61045a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103895760405162461bcd60e51b815260206004820152601d60248201527f4d65726974436f696e3a20596f7520617265206e6f74206d696e74657200000060448201526064015b60405180910390fd5b61039382826107c6565b5050565b606060048054610229906109ca565b600033816103b4828661042f565b9050838110156104145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610380565b6102df828686840361045a565b6000336102ba8185856105f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166104bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610380565b6001600160a01b03821661051d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610380565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061058a848461042f565b905060001981146105f257818110156105e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610380565b6105f2848484840361045a565b50505050565b6001600160a01b03831661065c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610380565b6001600160a01b0382166106be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610380565b6001600160a01b038316600090815260208190526040902054818110156107365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610380565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061076d908490610a04565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107b991815260200190565b60405180910390a36105f2565b6001600160a01b03821661081c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610380565b806002600082825461082e9190610a04565b90915550506001600160a01b0382166000908152602081905260408120805483929061085b908490610a04565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b818110156108d2578581018301518582016040015282016108b6565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461090a57600080fd5b919050565b6000806040838503121561092257600080fd5b61092b836108f3565b946020939093013593505050565b60008060006060848603121561094e57600080fd5b610957846108f3565b9250610965602085016108f3565b9150604084013590509250925092565b60006020828403121561098757600080fd5b610990826108f3565b9392505050565b600080604083850312156109aa57600080fd5b6109b3836108f3565b91506109c1602084016108f3565b90509250929050565b600181811c908216806109de57607f821691505b6020821081036109fe57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102c057634e487b7160e01b600052601160045260246000fdfea2646970667358221220921514c06960e86d0055124d07f2216430593752dbe984a8bb1dd6d95a7fd32864736f6c63430008140033a264697066735822122027b55404b45e9446a006b48fb9c5b2f5e9233004e34d9f93da6acce8924552d664736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2231,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "startTime",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2233,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "variationFactor",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 2235,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "remainingSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 2237,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "lastDecrement",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 2240,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "meritCoin",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(MeritCoin)2705"
      },
      {
        "astId": 2244,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "mintNum",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2248,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "updateSupplyByDay",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2254,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "userMintNumByDay",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MeritCoin)2705": {
        "encoding": "inplace",
        "label": "contract MeritCoin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}