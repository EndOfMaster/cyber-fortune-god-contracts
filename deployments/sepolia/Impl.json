{
  "address": "0xD37dC1C1016843263a133449A3DffD1ce95b07Ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_variationFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "OfferingIncense",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdateSupplyByDay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "firstMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_variationFactor",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDecrement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "meritCoin",
      "outputs": [
        {
          "internalType": "contract MeritCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "offeringIncense",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thirdMintByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyByDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "updateSupplyByDay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "variationFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x72671b7b19892b202ba75f54781a5b4d1e876a3456d842cd211b6e3dc9eeb719",
  "receipt": {
    "to": null,
    "from": "0x37D2AC60E6fB6B0c54969f75D10245Bff815bce3",
    "contractAddress": "0xD37dC1C1016843263a133449A3DffD1ce95b07Ac",
    "transactionIndex": 28,
    "gasUsed": "2181239",
    "logsBloom": "0x
    "blockHash": "0x53c285c978a64b62ead267330877a0425a11224a279effd8683531ea0fd765ba",
    "transactionHash": "0x72671b7b19892b202ba75f54781a5b4d1e876a3456d842cd211b6e3dc9eeb719",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 6037743,
        "transactionHash": "0x72671b7b19892b202ba75f54781a5b4d1e876a3456d842cd211b6e3dc9eeb719",
        "address": "0xD37dC1C1016843263a133449A3DffD1ce95b07Ac",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000037d2ac60e6fb6b0c54969f75d10245bff815bce3"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x53c285c978a64b62ead267330877a0425a11224a279effd8683531ea0fd765ba"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 6037743,
        "transactionHash": "0x72671b7b19892b202ba75f54781a5b4d1e876a3456d842cd211b6e3dc9eeb719",
        "address": "0xD37dC1C1016843263a133449A3DffD1ce95b07Ac",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 50,
        "blockHash": "0x53c285c978a64b62ead267330877a0425a11224a279effd8683531ea0fd765ba"
      }
    ],
    "blockNumber": 6037743,
    "cumulativeGasUsed": "8284538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1717516800",
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "219a64aa37d1aac1b0da5a132db0b0df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variationFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"OfferingIncense\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplyByDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"firstMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variationFactor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meritCoin\",\"outputs\":[{\"internalType\":\"contract MeritCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"offeringIncense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdMintByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateSupplyByDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyberFortuneGod.sol\":\"CyberFortuneGod\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyberFortuneGod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./MeritCoin.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract CyberFortuneGod is OwnableUpgradeable {\\n    uint256 public constant totalSupplyByDay = 888;\\n    uint256 public constant firstMintByDay = 88;\\n    uint256 public constant secondMintByDay = 66;\\n    uint256 public constant thirdMintByDay = 36;\\n    uint256 public constant mintPrice = 3 * 1e15;\\n\\n    uint256 public startTime;\\n    uint256 public variationFactor;\\n\\n    uint256 public remainingSupply;\\n    uint256 public lastDecrement;\\n\\n    MeritCoin public meritCoin;\\n\\n    //Record the number of mint successes every day since the start\\n    //days => mint times\\n    mapping(uint256 => uint256) public mintNum;\\n\\n    //Record whether the distribution volume is updated on that day\\n    mapping(uint256 => bool) public updateSupplyByDay;\\n\\n    event OfferingIncense(address _sender, uint256 _mintAmount);\\n\\n    event WithdrawETH(address _sender, address _receiver, uint256 _amount);\\n\\n    event UpdateSupplyByDay(address _sender, uint256 _days, uint256 _timestamp);\\n\\n    function initialize(uint256 _startTime, uint256 _variationFactor) public initializer {\\n        __Ownable_init(msg.sender);\\n        startTime = _startTime;\\n        variationFactor = _variationFactor;\\n        remainingSupply = totalSupplyByDay;\\n        meritCoin = new MeritCoin(address(this));\\n    }\\n\\n    constructor(uint256 _startTime, uint256 _variationFactor) {\\n        initialize(_startTime, _variationFactor);\\n    }\\n\\n    // ==================== non-view function ====================\\n\\n    //main user function\\n    function offeringIncense(uint256 _nonce) external payable {\\n        require(msg.value >= mintPrice, \\\"CyberFortuneGod: Insufficient incense money\\\");\\n\\n        //update supply by day\\n        uint256 _days = getDays();\\n        if (!updateSupplyByDay[_days]) {\\n            updateSupplyByDay[_days] = true;\\n            remainingSupply = totalSupplyByDay;\\n            \\n            emit UpdateSupplyByDay(msg.sender, _days, block.timestamp);\\n        }\\n\\n        uint256 _returns = getMintAmount(_nonce);\\n        require(_returns > 0, \\\"CyberFortuneGod: The incense money has been distributed out today\\\");\\n\\n        uint256 _decimals = meritCoin.decimals();\\n        uint256 _mintAmount = 10 ** _decimals * _returns;\\n        meritCoin.mint(msg.sender, _mintAmount);\\n\\n        emit OfferingIncense(msg.sender, _mintAmount);\\n    }\\n\\n    // ==================== view function ====================\\n\\n    function random(uint256 min, uint256 max, uint256 _nonce) public view returns (uint256) {\\n        require(max > min, \\\"max must be greater than min\\\");\\n        uint256 randomHash = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender, _nonce)));\\n        return (randomHash % (max - min + 1)) + min;\\n    }\\n\\n    function getDays() public view returns (uint256) {\\n        return (block.timestamp - startTime) / (24 * 60 * 60);\\n    }\\n\\n    // ==================== private function ====================\\n\\n    function getMintAmount(uint256 _nonce) private returns (uint256 _returns) {\\n        if (remainingSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _days = getDays();\\n        uint256 _mintNum = mintNum[_days];\\n\\n        if (_mintNum < 3) {\\n            _returns = getTop3Amount(_mintNum);\\n        } else {\\n            uint256 _randomSub = random(0, variationFactor, _nonce);\\n            _returns = _randomSub >= lastDecrement ? lastDecrement : lastDecrement - _randomSub;\\n        }\\n\\n        if (_returns >= remainingSupply) {\\n            _returns = remainingSupply;\\n            remainingSupply = 0;\\n            lastDecrement = 0;\\n            return _returns; // Return 0 if the random decrement is greater than the remaining supply\\n        }\\n\\n        lastDecrement = _returns;\\n        remainingSupply -= _returns;\\n        if (_returns > 0) {\\n            mintNum[_days] = _mintNum + 1;\\n        }\\n    }\\n\\n    function getTop3Amount(uint256 _mintNum) private pure returns (uint256 _returns) {\\n        if (_mintNum == 0) return firstMintByDay;\\n        if (_mintNum == 1) return secondMintByDay;\\n        if (_mintNum == 2) return thirdMintByDay;\\n    }\\n\\n    // ==================== owner function ====================\\n\\n    function withdrawETH(address _to) external onlyOwner {\\n        uint256 _balance = address(this).balance;\\n        payable(_to).transfer(_balance);\\n\\n        emit WithdrawETH(msg.sender, _to, _balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0b2c685c22935d70f04b6c167481611599dbd980342074445a73ad5062e5add6\",\"license\":\"MIT\"},\"contracts/MeritCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MeritCoin is ERC20 {\\n    address public immutable minter;\\n\\n    constructor(address _minter) ERC20(\\\"MeritCoin\\\", \\\"MC\\\") {\\n        minter = _minter;\\n    }\\n\\n    function mint(address _to, uint256 _amount) external {\\n        require(msg.sender == minter, \\\"MeritCoin: You are not minter\\\");\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6c05bca2638a30c97111da120d1286093d4355ab289562703bf814564e0892ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027ca380380620027ca8339810160408190526200003491620002fc565b62000040828262000048565b505062000321565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b0316600081158015620000935750825b90506000826001600160401b03166001148015620000b05750303b155b905081158015620000bf575080155b15620000de5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b031916600117855583156200010d57845460ff60401b1916680100000000000000001785555b6200011833620001d6565b6000879055600186905561037860025560405130906200013890620002ee565b6001600160a01b039091168152602001604051809103906000f08015801562000165573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790558315620001cd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b620001e0620001ee565b620001eb816200023f565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166200023d57604051631afcd79f60e31b815260040160405180910390fd5b565b62000249620001ee565b6001600160a01b0381166200027857604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620001eb817f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b610a918062001d3983390190565b600080604083850312156200031057600080fd5b505080516020909101519092909150565b611a0880620003316000396000f3fe6080604052600436106200013b5760003560e01c8063a1545ef511620000ad578063d00ebaeb116200006c578063d00ebaeb1462000362578063da0239a61462000384578063e4a30116146200039c578063ed8941be14620003c1578063f2fde38b14620003d857600080fd5b8063a1545ef514620002ec578063b3e6d4341462000304578063b76d9db9146200031c578063b7dc47af1462000333578063c9a6bd51146200034b57600080fd5b80637299054c11620000fa5780637299054c146200022d57806378e9792514620002525780637db79418146200026a5780638da5cb5b14620002825780638f7a0c4914620002d557600080fd5b8063223d534b1462000148578063619f6565146200018c5780636817c76c14620001d1578063690d832014620001ee578063715018a6146200021557600080fd5b366200014357005b600080fd5b3480156200015557600080fd5b50620001796200016736600462000ccf565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156200019957600080fd5b50620001c0620001ab36600462000ccf565b60066020526000908152604090205460ff1681565b604051901515815260200162000183565b348015620001de57600080fd5b5062000179660aa87bee53800081565b348015620001fb57600080fd5b50620002136200020d36600462000ce9565b620003fd565b005b3480156200022257600080fd5b50620002136200048e565b3480156200023a57600080fd5b50620001796200024c36600462000d1b565b620004a6565b3480156200025f57600080fd5b506200017960005481565b3480156200027757600080fd5b506200017960035481565b3480156200028f57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200162000183565b348015620002e257600080fd5b5062000179604281565b348015620002f957600080fd5b506200017962000594565b3480156200031157600080fd5b506200017960015481565b3480156200032957600080fd5b5062000179602481565b3480156200034057600080fd5b506200017961037881565b3480156200035857600080fd5b5062000179605881565b3480156200036f57600080fd5b50600454620002bc906001600160a01b031681565b3480156200039157600080fd5b506200017960025481565b348015620003a957600080fd5b5062000213620003bb36600462000d48565b620005bb565b62000213620003d236600462000ccf565b62000742565b348015620003e557600080fd5b5062000213620003f736600462000ce9565b62000a11565b6200040762000a55565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801562000440573d6000803e3d6000fd5b50604080513381526001600160a01b03841660208201529081018290527f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060600160405180910390a15050565b6200049862000a55565b620004a4600062000ab3565b565b6000838311620004fd5760405162461bcd60e51b815260206004820152601c60248201527f6d6178206d7573742062652067726561746572207468616e206d696e0000000060448201526064015b60405180910390fd5b6000424433856040516020016200053f9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f19818403018152919052805160209091012090508462000566818662000d81565b6200057390600162000d9d565b6200057f908362000dc9565b6200058b919062000d9d565b95945050505050565b60006201518060005442620005aa919062000d81565b620005b6919062000de0565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015620006025750825b905060008267ffffffffffffffff166001148015620006205750303b155b9050811580156200062f575080155b156200064e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156200067957845460ff60401b1916600160401b1785555b620006843362000b24565b600087905560018690556103786002556040513090620006a49062000cc1565b6001600160a01b039091168152602001604051809103906000f080158015620006d1573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905583156200073957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b660aa87bee538000341015620007af5760405162461bcd60e51b815260206004820152602b60248201527f4379626572466f7274756e65476f643a20496e73756666696369656e7420696e60448201526a63656e7365206d6f6e657960a81b6064820152608401620004f4565b6000620007bb62000594565b60008181526006602052604090205490915060ff166200083657600081815260066020908152604091829020805460ff191660011790556103786002558151338152908101839052428183015290517fbea77d7032571316759bda46ee1544473a0b842e1ad3b20aec6c09b5c588b889916060908290030190a15b6000620008438362000b39565b905060008111620008c75760405162461bcd60e51b815260206004820152604160248201527f4379626572466f7274756e65476f643a2054686520696e63656e7365206d6f6e60448201527f657920686173206265656e206469737472696275746564206f757420746f64616064820152607960f81b608482015260a401620004f4565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000943919062000df7565b60ff1690506000826200095883600a62000f19565b62000964919062000f27565b600480546040516340c10f1960e01b81523392810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015620009b757600080fd5b505af1158015620009cc573d6000803e3d6000fd5b505060408051338152602081018590527f9dff41da70aedfc40cf8d5e57e66ae3053b5477933045f08db4b19e24918bec9935001905060405180910390a15050505050565b62000a1b62000a55565b6001600160a01b03811662000a4757604051631e4fbdf760e01b815260006004820152602401620004f4565b62000a528162000ab3565b50565b3362000a887f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614620004a45760405163118cdaa760e01b8152336004820152602401620004f4565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b62000b2e62000c33565b62000a528162000c7d565b600060025460000362000b4e57506000919050565b600062000b5a62000594565b600081815260056020526040902054909150600381101562000b895762000b818162000c87565b925062000bc6565b600062000b9b600060015487620004a6565b905060035481101562000bbe578060035462000bb8919062000d81565b62000bc2565b6003545b9350505b600254831062000be85750506002805460009182905560039190915592915050565b82600381905550826002600082825462000c03919062000d81565b9091555050821562000c2c5762000c1c81600162000d9d565b6000838152600560205260409020555b5050919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16620004a457604051631afcd79f60e31b815260040160405180910390fd5b62000a1b62000c33565b60008160000362000c9a57506058919050565b8160010362000cab57506042919050565b8160020362000cbc57506024919050565b919050565b610a918062000f4283390190565b60006020828403121562000ce257600080fd5b5035919050565b60006020828403121562000cfc57600080fd5b81356001600160a01b038116811462000d1457600080fd5b9392505050565b60008060006060848603121562000d3157600080fd5b505081359360208301359350604090920135919050565b6000806040838503121562000d5c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000d975762000d9762000d6b565b92915050565b8082018082111562000d975762000d9762000d6b565b634e487b7160e01b600052601260045260246000fd5b60008262000ddb5762000ddb62000db3565b500690565b60008262000df25762000df262000db3565b500490565b60006020828403121562000e0a57600080fd5b815160ff8116811462000d1457600080fd5b600181815b8085111562000e5d57816000190482111562000e415762000e4162000d6b565b8085161562000e4f57918102915b93841c939080029062000e21565b509250929050565b60008262000e765750600162000d97565b8162000e855750600062000d97565b816001811462000e9e576002811462000ea95762000ec9565b600191505062000d97565b60ff84111562000ebd5762000ebd62000d6b565b50506001821b62000d97565b5060208310610133831016604e8410600b841016171562000eee575081810a62000d97565b62000efa838362000e1c565b806000190482111562000f115762000f1162000d6b565b029392505050565b600062000d14838362000e65565b808202811582820484141762000d975762000d9762000d6b56fe60a060405234801561001057600080fd5b50604051610a91380380610a9183398101604081905261002f9161009c565b6040518060400160405280600981526020016826b2b934ba21b7b4b760b91b815250604051806040016040528060028152602001614d4360f01b815250816003908161007b919061016b565b506004610088828261016b565b5050506001600160a01b031660805261022a565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100f657607f821691505b60208210810361011657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561016657600081815260208120601f850160051c810160208610156101435750805b601f850160051c820191505b818110156101625782815560010161014f565b5050505b505050565b81516001600160401b03811115610184576101846100cc565b6101988161019284546100e2565b8461011c565b602080601f8311600181146101cd57600084156101b55750858301515b600019600386901b1c1916600185901b178555610162565b600085815260208120601f198616915b828110156101fc578886015182559484019460019091019084016101dd565b508582101561021a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161084661024b6000396000818160d101526102cf01526108466000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461015357806340c10f191461016257806370a082311461017757806395d89b41146101a0578063a9059cbb146101a8578063dd62ed3e146101bb57600080fd5b806306fdde03146100ae57806307546172146100cc578063095ea7b31461010b57806318160ddd1461012e57806323b872dd14610140575b600080fd5b6100b66101f4565b6040516100c39190610690565b60405180910390f35b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c3565b61011e6101193660046106fa565b610286565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b61011e61014e366004610724565b6102a0565b604051601281526020016100c3565b6101756101703660046106fa565b6102c4565b005b610132610185366004610760565b6001600160a01b031660009081526020819052604090205490565b6100b661034f565b61011e6101b63660046106fa565b61035e565b6101326101c9366004610782565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610203906107b5565b80601f016020809104026020016040519081016040528092919081815260200182805461022f906107b5565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050905090565b60003361029481858561036c565b60019150505b92915050565b6000336102ae85828561037e565b6102b98585856103fc565b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103415760405162461bcd60e51b815260206004820152601d60248201527f4d65726974436f696e3a20596f7520617265206e6f74206d696e74657200000060448201526064015b60405180910390fd5b61034b828261045b565b5050565b606060048054610203906107b5565b6000336102948185856103fc565b6103798383836001610491565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146103f657818110156103e757604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610338565b6103f684848484036000610491565b50505050565b6001600160a01b03831661042657604051634b637e8f60e11b815260006004820152602401610338565b6001600160a01b0382166104505760405163ec442f0560e01b815260006004820152602401610338565b610379838383610566565b6001600160a01b0382166104855760405163ec442f0560e01b815260006004820152602401610338565b61034b60008383610566565b6001600160a01b0384166104bb5760405163e602df0560e01b815260006004820152602401610338565b6001600160a01b0383166104e557604051634a1406b160e11b815260006004820152602401610338565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103f657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161055891815260200190565b60405180910390a350505050565b6001600160a01b03831661059157806002600082825461058691906107ef565b909155506106039050565b6001600160a01b038316600090815260208190526040902054818110156105e45760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610338565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661061f5760028054829003905561063e565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161068391815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156106bd578581018301518582016040015282016106a1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106f557600080fd5b919050565b6000806040838503121561070d57600080fd5b610716836106de565b946020939093013593505050565b60008060006060848603121561073957600080fd5b610742846106de565b9250610750602085016106de565b9150604084013590509250925092565b60006020828403121561077257600080fd5b61077b826106de565b9392505050565b6000806040838503121561079557600080fd5b61079e836106de565b91506107ac602084016106de565b90509250929050565b600181811c908216806107c957607f821691505b6020821081036107e957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029a57634e487b7160e01b600052601160045260246000fdfea2646970667358221220997c71fd734b1a3575490b8fcc86344a909e47becfb2fc2b9b71d0cf9f5079c464736f6c63430008140033a2646970667358221220e6b1c020ab871c41e24eea32ac7f27bc1eeaaa82bba47b03641d746b0229f25264736f6c6343000814003360a060405234801561001057600080fd5b50604051610a91380380610a9183398101604081905261002f9161009c565b6040518060400160405280600981526020016826b2b934ba21b7b4b760b91b815250604051806040016040528060028152602001614d4360f01b815250816003908161007b919061016b565b506004610088828261016b565b5050506001600160a01b031660805261022a565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100f657607f821691505b60208210810361011657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561016657600081815260208120601f850160051c810160208610156101435750805b601f850160051c820191505b818110156101625782815560010161014f565b5050505b505050565b81516001600160401b03811115610184576101846100cc565b6101988161019284546100e2565b8461011c565b602080601f8311600181146101cd57600084156101b55750858301515b600019600386901b1c1916600185901b178555610162565b600085815260208120601f198616915b828110156101fc578886015182559484019460019091019084016101dd565b508582101561021a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161084661024b6000396000818160d101526102cf01526108466000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461015357806340c10f191461016257806370a082311461017757806395d89b41146101a0578063a9059cbb146101a8578063dd62ed3e146101bb57600080fd5b806306fdde03146100ae57806307546172146100cc578063095ea7b31461010b57806318160ddd1461012e57806323b872dd14610140575b600080fd5b6100b66101f4565b6040516100c39190610690565b60405180910390f35b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c3565b61011e6101193660046106fa565b610286565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b61011e61014e366004610724565b6102a0565b604051601281526020016100c3565b6101756101703660046106fa565b6102c4565b005b610132610185366004610760565b6001600160a01b031660009081526020819052604090205490565b6100b661034f565b61011e6101b63660046106fa565b61035e565b6101326101c9366004610782565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610203906107b5565b80601f016020809104026020016040519081016040528092919081815260200182805461022f906107b5565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050905090565b60003361029481858561036c565b60019150505b92915050565b6000336102ae85828561037e565b6102b98585856103fc565b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103415760405162461bcd60e51b815260206004820152601d60248201527f4d65726974436f696e3a20596f7520617265206e6f74206d696e74657200000060448201526064015b60405180910390fd5b61034b828261045b565b5050565b606060048054610203906107b5565b6000336102948185856103fc565b6103798383836001610491565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146103f657818110156103e757604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610338565b6103f684848484036000610491565b50505050565b6001600160a01b03831661042657604051634b637e8f60e11b815260006004820152602401610338565b6001600160a01b0382166104505760405163ec442f0560e01b815260006004820152602401610338565b610379838383610566565b6001600160a01b0382166104855760405163ec442f0560e01b815260006004820152602401610338565b61034b60008383610566565b6001600160a01b0384166104bb5760405163e602df0560e01b815260006004820152602401610338565b6001600160a01b0383166104e557604051634a1406b160e11b815260006004820152602401610338565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103f657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161055891815260200190565b60405180910390a350505050565b6001600160a01b03831661059157806002600082825461058691906107ef565b909155506106039050565b6001600160a01b038316600090815260208190526040902054818110156105e45760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610338565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661061f5760028054829003905561063e565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161068391815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156106bd578581018301518582016040015282016106a1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106f557600080fd5b919050565b6000806040838503121561070d57600080fd5b610716836106de565b946020939093013593505050565b60008060006060848603121561073957600080fd5b610742846106de565b9250610750602085016106de565b9150604084013590509250925092565b60006020828403121561077257600080fd5b61077b826106de565b9392505050565b6000806040838503121561079557600080fd5b61079e836106de565b91506107ac602084016106de565b90509250929050565b600181811c908216806107c957607f821691505b6020821081036107e957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029a57634e487b7160e01b600052601160045260246000fdfea2646970667358221220997c71fd734b1a3575490b8fcc86344a909e47becfb2fc2b9b71d0cf9f5079c464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106200013b5760003560e01c8063a1545ef511620000ad578063d00ebaeb116200006c578063d00ebaeb1462000362578063da0239a61462000384578063e4a30116146200039c578063ed8941be14620003c1578063f2fde38b14620003d857600080fd5b8063a1545ef514620002ec578063b3e6d4341462000304578063b76d9db9146200031c578063b7dc47af1462000333578063c9a6bd51146200034b57600080fd5b80637299054c11620000fa5780637299054c146200022d57806378e9792514620002525780637db79418146200026a5780638da5cb5b14620002825780638f7a0c4914620002d557600080fd5b8063223d534b1462000148578063619f6565146200018c5780636817c76c14620001d1578063690d832014620001ee578063715018a6146200021557600080fd5b366200014357005b600080fd5b3480156200015557600080fd5b50620001796200016736600462000ccf565b60056020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156200019957600080fd5b50620001c0620001ab36600462000ccf565b60066020526000908152604090205460ff1681565b604051901515815260200162000183565b348015620001de57600080fd5b5062000179660aa87bee53800081565b348015620001fb57600080fd5b50620002136200020d36600462000ce9565b620003fd565b005b3480156200022257600080fd5b50620002136200048e565b3480156200023a57600080fd5b50620001796200024c36600462000d1b565b620004a6565b3480156200025f57600080fd5b506200017960005481565b3480156200027757600080fd5b506200017960035481565b3480156200028f57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200162000183565b348015620002e257600080fd5b5062000179604281565b348015620002f957600080fd5b506200017962000594565b3480156200031157600080fd5b506200017960015481565b3480156200032957600080fd5b5062000179602481565b3480156200034057600080fd5b506200017961037881565b3480156200035857600080fd5b5062000179605881565b3480156200036f57600080fd5b50600454620002bc906001600160a01b031681565b3480156200039157600080fd5b506200017960025481565b348015620003a957600080fd5b5062000213620003bb36600462000d48565b620005bb565b62000213620003d236600462000ccf565b62000742565b348015620003e557600080fd5b5062000213620003f736600462000ce9565b62000a11565b6200040762000a55565b60405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801562000440573d6000803e3d6000fd5b50604080513381526001600160a01b03841660208201529081018290527f6b1f4ce962fec27598edceab6195c77516c3df32025eaf0c38d0d4009ac3bd489060600160405180910390a15050565b6200049862000a55565b620004a4600062000ab3565b565b6000838311620004fd5760405162461bcd60e51b815260206004820152601c60248201527f6d6178206d7573742062652067726561746572207468616e206d696e0000000060448201526064015b60405180910390fd5b6000424433856040516020016200053f9493929190938452602084019290925260601b6bffffffffffffffffffffffff19166040830152605482015260740190565b60408051601f19818403018152919052805160209091012090508462000566818662000d81565b6200057390600162000d9d565b6200057f908362000dc9565b6200058b919062000d9d565b95945050505050565b60006201518060005442620005aa919062000d81565b620005b6919062000de0565b905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015620006025750825b905060008267ffffffffffffffff166001148015620006205750303b155b9050811580156200062f575080155b156200064e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156200067957845460ff60401b1916600160401b1785555b620006843362000b24565b600087905560018690556103786002556040513090620006a49062000cc1565b6001600160a01b039091168152602001604051809103906000f080158015620006d1573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905583156200073957845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b660aa87bee538000341015620007af5760405162461bcd60e51b815260206004820152602b60248201527f4379626572466f7274756e65476f643a20496e73756666696369656e7420696e60448201526a63656e7365206d6f6e657960a81b6064820152608401620004f4565b6000620007bb62000594565b60008181526006602052604090205490915060ff166200083657600081815260066020908152604091829020805460ff191660011790556103786002558151338152908101839052428183015290517fbea77d7032571316759bda46ee1544473a0b842e1ad3b20aec6c09b5c588b889916060908290030190a15b6000620008438362000b39565b905060008111620008c75760405162461bcd60e51b815260206004820152604160248201527f4379626572466f7274756e65476f643a2054686520696e63656e7365206d6f6e60448201527f657920686173206265656e206469737472696275746564206f757420746f64616064820152607960f81b608482015260a401620004f4565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000943919062000df7565b60ff1690506000826200095883600a62000f19565b62000964919062000f27565b600480546040516340c10f1960e01b81523392810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015620009b757600080fd5b505af1158015620009cc573d6000803e3d6000fd5b505060408051338152602081018590527f9dff41da70aedfc40cf8d5e57e66ae3053b5477933045f08db4b19e24918bec9935001905060405180910390a15050505050565b62000a1b62000a55565b6001600160a01b03811662000a4757604051631e4fbdf760e01b815260006004820152602401620004f4565b62000a528162000ab3565b50565b3362000a887f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614620004a45760405163118cdaa760e01b8152336004820152602401620004f4565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b62000b2e62000c33565b62000a528162000c7d565b600060025460000362000b4e57506000919050565b600062000b5a62000594565b600081815260056020526040902054909150600381101562000b895762000b818162000c87565b925062000bc6565b600062000b9b600060015487620004a6565b905060035481101562000bbe578060035462000bb8919062000d81565b62000bc2565b6003545b9350505b600254831062000be85750506002805460009182905560039190915592915050565b82600381905550826002600082825462000c03919062000d81565b9091555050821562000c2c5762000c1c81600162000d9d565b6000838152600560205260409020555b5050919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16620004a457604051631afcd79f60e31b815260040160405180910390fd5b62000a1b62000c33565b60008160000362000c9a57506058919050565b8160010362000cab57506042919050565b8160020362000cbc57506024919050565b919050565b610a918062000f4283390190565b60006020828403121562000ce257600080fd5b5035919050565b60006020828403121562000cfc57600080fd5b81356001600160a01b038116811462000d1457600080fd5b9392505050565b60008060006060848603121562000d3157600080fd5b505081359360208301359350604090920135919050565b6000806040838503121562000d5c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000d975762000d9762000d6b565b92915050565b8082018082111562000d975762000d9762000d6b565b634e487b7160e01b600052601260045260246000fd5b60008262000ddb5762000ddb62000db3565b500690565b60008262000df25762000df262000db3565b500490565b60006020828403121562000e0a57600080fd5b815160ff8116811462000d1457600080fd5b600181815b8085111562000e5d57816000190482111562000e415762000e4162000d6b565b8085161562000e4f57918102915b93841c939080029062000e21565b509250929050565b60008262000e765750600162000d97565b8162000e855750600062000d97565b816001811462000e9e576002811462000ea95762000ec9565b600191505062000d97565b60ff84111562000ebd5762000ebd62000d6b565b50506001821b62000d97565b5060208310610133831016604e8410600b841016171562000eee575081810a62000d97565b62000efa838362000e1c565b806000190482111562000f115762000f1162000d6b565b029392505050565b600062000d14838362000e65565b808202811582820484141762000d975762000d9762000d6b56fe60a060405234801561001057600080fd5b50604051610a91380380610a9183398101604081905261002f9161009c565b6040518060400160405280600981526020016826b2b934ba21b7b4b760b91b815250604051806040016040528060028152602001614d4360f01b815250816003908161007b919061016b565b506004610088828261016b565b5050506001600160a01b031660805261022a565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100f657607f821691505b60208210810361011657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561016657600081815260208120601f850160051c810160208610156101435750805b601f850160051c820191505b818110156101625782815560010161014f565b5050505b505050565b81516001600160401b03811115610184576101846100cc565b6101988161019284546100e2565b8461011c565b602080601f8311600181146101cd57600084156101b55750858301515b600019600386901b1c1916600185901b178555610162565b600085815260208120601f198616915b828110156101fc578886015182559484019460019091019084016101dd565b508582101561021a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161084661024b6000396000818160d101526102cf01526108466000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461015357806340c10f191461016257806370a082311461017757806395d89b41146101a0578063a9059cbb146101a8578063dd62ed3e146101bb57600080fd5b806306fdde03146100ae57806307546172146100cc578063095ea7b31461010b57806318160ddd1461012e57806323b872dd14610140575b600080fd5b6100b66101f4565b6040516100c39190610690565b60405180910390f35b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c3565b61011e6101193660046106fa565b610286565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b61011e61014e366004610724565b6102a0565b604051601281526020016100c3565b6101756101703660046106fa565b6102c4565b005b610132610185366004610760565b6001600160a01b031660009081526020819052604090205490565b6100b661034f565b61011e6101b63660046106fa565b61035e565b6101326101c9366004610782565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610203906107b5565b80601f016020809104026020016040519081016040528092919081815260200182805461022f906107b5565b801561027c5780601f106102515761010080835404028352916020019161027c565b820191906000526020600020905b81548152906001019060200180831161025f57829003601f168201915b5050505050905090565b60003361029481858561036c565b60019150505b92915050565b6000336102ae85828561037e565b6102b98585856103fc565b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103415760405162461bcd60e51b815260206004820152601d60248201527f4d65726974436f696e3a20596f7520617265206e6f74206d696e74657200000060448201526064015b60405180910390fd5b61034b828261045b565b5050565b606060048054610203906107b5565b6000336102948185856103fc565b6103798383836001610491565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146103f657818110156103e757604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610338565b6103f684848484036000610491565b50505050565b6001600160a01b03831661042657604051634b637e8f60e11b815260006004820152602401610338565b6001600160a01b0382166104505760405163ec442f0560e01b815260006004820152602401610338565b610379838383610566565b6001600160a01b0382166104855760405163ec442f0560e01b815260006004820152602401610338565b61034b60008383610566565b6001600160a01b0384166104bb5760405163e602df0560e01b815260006004820152602401610338565b6001600160a01b0383166104e557604051634a1406b160e11b815260006004820152602401610338565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103f657826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161055891815260200190565b60405180910390a350505050565b6001600160a01b03831661059157806002600082825461058691906107ef565b909155506106039050565b6001600160a01b038316600090815260208190526040902054818110156105e45760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610338565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661061f5760028054829003905561063e565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161068391815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156106bd578581018301518582016040015282016106a1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146106f557600080fd5b919050565b6000806040838503121561070d57600080fd5b610716836106de565b946020939093013593505050565b60008060006060848603121561073957600080fd5b610742846106de565b9250610750602085016106de565b9150604084013590509250925092565b60006020828403121561077257600080fd5b61077b826106de565b9392505050565b6000806040838503121561079557600080fd5b61079e836106de565b91506107ac602084016106de565b90509250929050565b600181811c908216806107c957607f821691505b6020821081036107e957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029a57634e487b7160e01b600052601160045260246000fdfea2646970667358221220997c71fd734b1a3575490b8fcc86344a909e47becfb2fc2b9b71d0cf9f5079c464736f6c63430008140033a2646970667358221220e6b1c020ab871c41e24eea32ac7f27bc1eeaaa82bba47b03641d746b0229f25264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1305,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "startTime",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1307,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "variationFactor",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1309,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "remainingSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1311,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "lastDecrement",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1314,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "meritCoin",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MeritCoin)1749"
      },
      {
        "astId": 1318,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "mintNum",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1322,
        "contract": "contracts/CyberFortuneGod.sol:CyberFortuneGod",
        "label": "updateSupplyByDay",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MeritCoin)1749": {
        "encoding": "inplace",
        "label": "contract MeritCoin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}